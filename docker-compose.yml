services:
  db:
    image: postgres:17
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: changethis
      POSTGRES_DB: wetterstation
    command: [ "postgres", "-c", "log_statement=all" ]
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 10s
      retries: 5
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  adminer:
    image: adminer
    restart: always
    ports:
      - 8080:8080

  zec-mqtt-broker:
    container_name: zec-mqtt-broker
    image: eclipse-mosquitto
    env_file:
      - .env
    ports:
      - ${MQTT_PORT}:${MQTT_PORT}
      - 8080:8080
    volumes:
      - ./config:/mosquitto/config
      - ./data:/mosquitto/data
      - ./log:/mosquitto/log
    healthcheck:
      test: [ "CMD-SHELL", "pgrep mosquitto" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 5s

  zec-redis-db:
    container_name: zec-redis-db
    image: redis:alpine
    env_file:
      - .env
    # --save = redis will not save data to disk
    # --appendonly no = disables Append-Only files, no saves are persistant
    command: [ "redis-server", "--save", "", "--appendonly", "no" ]
    tmpfs:
      - /data
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 30s
      timeout: 3s
      retries: 5

  zec-mqtt-worker:
    container_name: zec-mqtt-worker
    build:
      context: ./mqtt-worker
    restart: always
    depends_on:
      zec-redis-db:
        condition: service_healthy
        restart: true
      zec-mqtt-broker:
        condition: service_healthy
        restart: true
      # zec-mqtt-worker-testing:
      #   condition: service_completed_successfully

    env_file:
      - .env
    ports:
      - ${MQTT_WORKER_PORT}:${MQTT_WORKER_PORT}
    environment:
      - MQTT_IP=${MQTT_IP}
      - MQTT_PORT=${MQTT_PORT}
      - MQTT_TOPIC=${MQTT_TOPIC}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}

volumes:
  postgres_data:
